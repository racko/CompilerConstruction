a = 1; b = 2; const x y = x; flip f x y = f y x; pair x y = \f . f x y; fst p = p const; snd p = p (flip const); main = snd (pair a b);

id x = x

nil = \a b . b; cons h t = \a b . a h (t a b)

const x y = x; flip f x y = f y x; pair x y = \f . f x y; fst p = p const; snd p = p (flip const); O = \a b . b; S x = \a b . a (x a b); inc x = S x; dec x = snd (x (\p . pair (inc (fst p)) (fst p)) (pair 0 undefined)); main = dec (S (S (S O)));


fix f = \g . (\x . g (x x)) (\x . g (x x))

true = const
false = flip const

#pred n = \f x . n (\g h . h (g f)) (const x) id

add a b = b inc a 
#minus a b = b dec a
minus a b = snd (a (\p . eq a (fst p) p (pair (inc (fst p)) (inc (snd p)))) (pair b O))
times a b = b (add a) O

eq0 x = x (const false) true
gt0 x = not (eq0 x)

cmp_ f a b l e g = eq0 a (eq0 b e l) (eq0 b g (f (dec a) (dec b) l e g)) # quadratic worst case runtime due to linear runtime of dec. I feel that I should build up some list like expression while iterating over and then reduce it while iterating over b ...
cmp = fix cmp_

eq a b = cmp a b false true false
lt a b = cmp a b true false false
gt a b = cmp a b false false true
neq a b = not (eq a b)
geq a b = not (lt a b)
leq a b = not (gt a b)

#eq a b = eq0 (minus a b)
#gt a b = gt0 (minus a b)
#leq a b = not (gt a b) # == not (gt0 (minus a b)) == not (not (eq0 (minus a b))) == eq0 (minus a b) == eq a b  (undefined if b > a ...)


if c a b = c a b
and a b = if a b false
or a b = if a true b
not a = flip

# l = [(c1, a), (c2, b), ..., (true,default)]
case l = l (\x acc . if (fst x) (snd x) acc) undefined

#fac_ f n = eq0 n (S O) (mult n (f (dec n)))
#fac = fix fac_


fac n = snd (n (\p . pair (inc (fst p)) (times (fst p) (snd p))) (pair (S O) (S O)))

#########################################################

S n = \f x . f n
O = \f x . x

inc = S
dec n = n id undefined

#fix f = f (fix f)
iterate = fix (\iterate_ f x n . n (\m . f (iterate_ f x m)) x)

iterate f x n
= fix (\iterate_ f x n . n (\m . f (iterate_ f x m)) x) f x n
= ((\iterate_ f x n . n (\m . f (iterate_ f x m)) x) iterate) f x n
= (\f x n . n (\m . f (iterate f x m)) x) f x n
= n (\m . f (iterate f x m)) x

iterate f x (S n)
= (S n) (\m . f (iterate f x m)) x
= (\f x . f n) (\m . f (iterate f x m)) x
= (\m . f (iterate f x m)) n
= f (iterate f x n)

add = iterate inc
minus = iterate dec
times a = iterate (add a) O
pow a = iterate (times a) (S O)

fac n = snd (iterate (\p . pair (inc (fst p)) (times (fst p) (snd p))) (pair (S O) (S O)) n)

cons h t = \ f x . f h t
nil = \f x . x

#########################################################

S n = \f x . f n (n f x)
O = \f x . x

inc = S
dec n = n const undefined

iterate f x n = n (\m acc . f acc) x

iterate f x (S n)
= (S n) (\m acc . f acc) x
= (\m acc . f acc) n (n (\m acc . f acc) x)
= f (n (\m acc . f acc) x)
= f (iterate f x n)

add = iterate inc
minus = iterate dec
times a = iterate (add a) O
pow a = iterate (times a) (S O)

fac n = n (\m acc . times m acc) (S O) 
fib n = fst (n (\m acc . pair (add (fst acc) (snd acc)) (fst acc)) (pair O (S O)))

#########################################################

